const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://ugecshlhptnyeemmedoy.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVnZWNzaGxocHRueWVlbW1lZG95Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTkwMDY1MCwiZXhwIjoyMDcxNDc2NjUwfQ.RBM4O4shM8fFPyCfj3dJ1Ic4KsCAhTAJ2JrJd-MZTno';

const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function forceDisableEmailConfirmation() {
  try {
    console.log('üöÄ FORZANDO DESHABILITACI√ìN TOTAL DE CONFIRMACI√ìN DE EMAIL...');
    
    // 1. Confirmar TODOS los usuarios existentes
    console.log('\n1Ô∏è‚É£ Confirmando TODOS los usuarios...');
    const { data: users, error: fetchError } = await supabase.auth.admin.listUsers();
    
    if (fetchError) {
      console.error('‚ùå Error obteniendo usuarios:', fetchError);
      return;
    }
    
    console.log(`üìä Encontrados ${users.users.length} usuarios`);
    
    for (const user of users.users) {
      if (!user.email_confirmed_at) {
        console.log(`üìß Confirmando usuario: ${user.email}`);
        
        const { error: updateError } = await supabase.auth.admin.updateUserById(
          user.id,
          {
            email_confirm: true
          }
        );
        
        if (updateError) {
          console.error(`‚ùå Error confirmando ${user.email}:`, updateError);
        } else {
          console.log(`‚úÖ Usuario confirmado: ${user.email}`);
        }
      } else {
        console.log(`‚úì Usuario ya confirmado: ${user.email}`);
      }
    }
    
    // 2. Actualizar directamente en la base de datos
    console.log('\n2Ô∏è‚É£ Actualizando directamente en auth.users...');
    const { error: sqlError } = await supabase.rpc('exec_sql', {
      sql: `
        UPDATE auth.users 
        SET 
          email_confirmed_at = COALESCE(email_confirmed_at, NOW()),
          confirmed_at = COALESCE(confirmed_at, NOW())
        WHERE email_confirmed_at IS NULL OR confirmed_at IS NULL;
      `
    });
    
    if (sqlError) {
      console.log('‚ö†Ô∏è No se pudo ejecutar SQL directo (normal en algunos casos)');
    } else {
      console.log('‚úÖ Actualizaci√≥n SQL exitosa');
    }
    
    // 3. Verificar estado final
    console.log('\n3Ô∏è‚É£ Verificando estado final...');
    const { data: finalUsers, error: finalError } = await supabase.auth.admin.listUsers();
    
    if (finalError) {
      console.error('‚ùå Error en verificaci√≥n final:', finalError);
      return;
    }
    
    const unconfirmedCount = finalUsers.users.filter(u => !u.email_confirmed_at).length;
    const confirmedCount = finalUsers.users.filter(u => u.email_confirmed_at).length;
    
    console.log(`\nüìä ESTADO FINAL:`);
    console.log(`‚úÖ Usuarios confirmados: ${confirmedCount}`);
    console.log(`‚ùå Usuarios sin confirmar: ${unconfirmedCount}`);
    
    if (unconfirmedCount === 0) {
      console.log('\nüéâ ¬°TODOS LOS USUARIOS EST√ÅN CONFIRMADOS!');
    } else {
      console.log('\n‚ö†Ô∏è A√∫n hay usuarios sin confirmar');
    }
    
    console.log('\nüîß CONFIGURACI√ìN ADICIONAL REQUERIDA:');
    console.log('1. Ve al Dashboard de Supabase');
    console.log('2. Authentication > Settings');
    console.log('3. Desactiva "Enable email confirmations"');
    console.log('4. Guarda los cambios');
    
    console.log('\n‚ú® El login deber√≠a funcionar sin problemas ahora');
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

// Ejecutar el script
forceDisableEmailConfirmation();