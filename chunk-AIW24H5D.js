import{a as p}from"./chunk-GOBT7UBB.js";import{a as w,b as d}from"./chunk-G7YPFBNB.js";import{ba as g,ga as f}from"./chunk-B6672ACT.js";import{a as b,b as m,i as s}from"./chunk-ODN5LVDJ.js";var _=(()=>{class n{constructor(e){this.directAuthService=e,this.supabase=w(d.supabase.url,d.supabase.anonKey,{auth:{storageKey:"usuarios-service-auth"}})}getUsuarios(e){return s(this,null,function*(){try{console.log("Obteniendo usuarios desde Supabase...");let r=this.directAuthService.getAccessToken();r&&(yield this.supabase.auth.setSession({access_token:r,refresh_token:""}));let o=this.supabase.from("users").select("*").order("created_at",{ascending:!1});e&&(e.busqueda&&(o=o.or(`nombre.ilike.%${e.busqueda}%,email.ilike.%${e.busqueda}%`)),e.rol&&e.rol!=="todos"&&(o=o.eq("rol",e.rol)),e.activo!==null&&e.activo!==void 0&&(o=o.eq("activo",e.activo)));let{data:a,error:t}=yield o;if(t)throw console.error("Error al obtener usuarios:",t),t;return console.log("Usuarios obtenidos:",a?.length||0),a||[]}catch(r){throw console.error("Error en getUsuarios:",r),r}})}getUsuarioById(e){return s(this,null,function*(){try{console.log("Obteniendo usuario por ID:",e);let r=this.directAuthService.getAccessToken();r&&(yield this.supabase.auth.setSession({access_token:r,refresh_token:""}));let{data:o,error:a}=yield this.supabase.from("users").select("*").eq("id",e).single();if(a)throw console.error("Error al obtener usuario:",a),a;return o}catch(r){throw console.error("Error en getUsuarioById:",r),r}})}getObrasDisponibles(){return s(this,null,function*(){try{console.log("Obteniendo obras disponibles...");let e=this.directAuthService.getAccessToken();e&&(yield this.supabase.auth.setSession({access_token:e,refresh_token:""}));let{data:r,error:o}=yield this.supabase.from("obras").select("id, nombre, descripcion, estado").order("nombre");if(o)throw console.error("Error al obtener obras:",o),o;return console.log("Obras obtenidas:",r?.length||0),r||[]}catch(e){throw console.error("Error en getObrasDisponibles:",e),e}})}createUsuario(e){return s(this,null,function*(){try{console.log("Creando usuario:",e.email);let r=this.directAuthService.getAccessToken();if(r&&(yield this.supabase.auth.setSession({access_token:r,refresh_token:""})),e.password!==e.confirmPassword)throw new Error("Las contrase\xF1as no coinciden");if(!this.validarPassword(e.password))throw new Error("La contrase\xF1a debe tener al menos 8 caracteres, incluir may\xFAsculas, min\xFAsculas y n\xFAmeros");let{data:o}=yield this.supabase.from("users").select("id").eq("email",e.email).single();if(o)throw new Error("Ya existe un usuario con este email");let{data:a,error:t}=yield this.supabase.auth.signUp({email:e.email,password:e.password,options:{data:{nombre:e.nombre,rol:e.rol}}});if(t)throw console.error("Error al crear usuario en auth:",t),t;let c={id:a.user?.id,email:e.email,nombre:e.nombre,rol:e.rol,activo:!0},{data:l,error:u}=yield this.supabase.from("users").insert([c]).select().single();if(u)throw console.error("Error al crear usuario en tabla users:",u),a.user?.id&&(yield this.supabase.auth.admin.deleteUser(a.user.id)),u;if(e.obra_id&&a.user?.id)try{console.log("Intentando asignar obra:",{user_id:a.user.id,obra_id:e.obra_id,rol_obra:e.rol});let{error:i}=yield this.supabase.from("user_obras").insert({user_id:a.user.id,obra_id:e.obra_id,rol_obra:e.rol,assigned_at:new Date().toISOString()});if(i)console.error("Error detallado al asignar obra al usuario:",{error:i,message:i.message,details:i.details,hint:i.hint,code:i.code}),console.warn("Usuario creado pero no se pudo asignar la obra");else{console.log("\u2705 Obra asignada exitosamente al usuario");let{data:v,error:h}=yield this.supabase.from("user_obras").select("*").eq("user_id",a.user.id).eq("obra_id",e.obra_id);h?console.error("Error al verificar inserci\xF3n:",h):console.log("\u2705 Verificaci\xF3n exitosa - Registro encontrado:",v)}}catch(i){console.error("Error en asignaci\xF3n de obra:",i)}return console.log("Usuario creado exitosamente:",l.id),l}catch(r){throw console.error("Error en createUsuario:",r),r}})}updateUsuario(e,r){return s(this,null,function*(){try{console.log("Actualizando usuario:",e);let o=this.directAuthService.getAccessToken();if(o&&(yield this.supabase.auth.setSession({access_token:o,refresh_token:""})),r.email){let{data:l}=yield this.supabase.from("users").select("id").eq("email",r.email).neq("id",e).single();if(l)throw new Error("Ya existe un usuario con este email")}let a=m(b({},r),{updated_at:new Date().toISOString()}),{data:t,error:c}=yield this.supabase.from("users").update(a).eq("id",e).select().single();if(c)throw console.error("Error al actualizar usuario:",c),c;return r.email&&(yield this.supabase.auth.admin.updateUserById(e,{email:r.email})),console.log("Usuario actualizado exitosamente:",t.id),t}catch(o){throw console.error("Error en updateUsuario:",o),o}})}deleteUsuario(e){return s(this,null,function*(){try{console.log("Eliminando usuario:",e);let r=this.directAuthService.getAccessToken();r&&(yield this.supabase.auth.setSession({access_token:r,refresh_token:""}));let{error:o}=yield this.supabase.from("users").delete().eq("id",e);if(o)throw console.error("Error al eliminar usuario de tabla users:",o),o;let{error:a}=yield this.supabase.auth.admin.deleteUser(e);a&&console.error("Error al eliminar usuario de auth:",a),console.log("Usuario eliminado exitosamente:",e)}catch(r){throw console.error("Error en deleteUsuario:",r),r}})}cambiarPassword(e,r){return s(this,null,function*(){try{console.log("Cambiando contrase\xF1a para usuario:",e);let o=this.directAuthService.getAccessToken();if(o&&(yield this.supabase.auth.setSession({access_token:o,refresh_token:""})),!this.validarPassword(r))throw new Error("La contrase\xF1a debe tener al menos 8 caracteres, incluir may\xFAsculas, min\xFAsculas y n\xFAmeros");let{error:a}=yield this.supabase.auth.admin.updateUserById(e,{password:r});if(a)throw console.error("Error al cambiar contrase\xF1a:",a),a;console.log("Contrase\xF1a cambiada exitosamente para usuario:",e)}catch(o){throw console.error("Error en cambiarPassword:",o),o}})}toggleUsuarioActivo(e){return s(this,null,function*(){try{console.log("Cambiando estado activo del usuario:",e);let r=yield this.getUsuarioById(e);if(!r)throw new Error("Usuario no encontrado");let o=!r.activo;return yield this.updateUsuario(e,{activo:o})}catch(r){throw console.error("Error en toggleUsuarioActivo:",r),r}})}validarPassword(e){return/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{8,}$/.test(e)}verificarPermisosResidente(){return s(this,null,function*(){try{let e=this.directAuthService.getCurrentUser();return e?(yield this.getUsuarioById(e.id))?.rol==="residente":!1}catch(e){return console.error("Error al verificar permisos:",e),!1}})}getEstadisticasUsuarios(){return s(this,null,function*(){try{let e=yield this.getUsuarios();return{total:e.length,activos:e.filter(r=>r.activo!==!1).length,inactivos:e.filter(r=>r.activo===!1).length,residentes:e.filter(r=>r.rol==="residente").length,logistica:e.filter(r=>r.rol==="logistica").length}}catch(e){throw console.error("Error al obtener estad\xEDsticas:",e),e}})}static{this.\u0275fac=function(r){return new(r||n)(f(p))}}static{this.\u0275prov=g({token:n,factory:n.\u0275fac,providedIn:"root"})}}return n})();export{_ as a};
